#!/usr/bin/env ruby
require 'gli'
require 'notehub'

nh = NotehubAPI.new

if RUBY_VERSION.to_f > 1.9
  Encoding.default_external = Encoding::UTF_8
  Encoding.default_internal = Encoding::UTF_8
end

include GLI::App

program_desc 'A command line interface for Notehub <notehub.org>'

version Notehub::VERSION

desc 'Create a new note'
arg_name '[text for new note]'
command :create do |c|
  c.desc 'Alternate theme to use for note (dark, solarized-light, solarized-dark)'
  c.flag [:theme]

  c.desc 'Alternate font to use for note (Google Web Fonts)'
  c.flag [:font]

  c.desc 'Alternate font to use for headers (Google Web Fonts)'
  c.flag [:header]

  c.desc 'Copy resulting url to clipboard'
  c.switch [:c,:copy], :negatable => false

  c.desc 'Open created note in browser'
  c.switch [:o,:open], :negatable => false

  c.desc 'Shorten URL'
  c.switch [:s,:short], :negatable => false

  c.desc 'Password for future edits'
  c.default_value nh.default_password
  c.flag [:p,:password]

  c.desc 'Read input from file'
  default_value false
  c.flag [:f,:file]

  c.desc 'Create note from pasteboard (OS X only)'
  c.switch [:P,:paste], :negatable => false

  c.action do |global_options,options,args|
    if options[:f]
      if File.exists?(File.expand_path(options[:f]))
        input = IO.read(File.expand_path(options[:f]))
      else
        raise "File not found: #{options[:f]}"
      end
    elsif options[:P]
      input = %x{pbpaste}
    elsif args.length > 0 && args[0] != "-"
      input = args.join(" ")
    # elsif STDIN.stat.size > 0
    else
      # puts "Input note text, ^d to submit"
      if RUBY_VERSION.to_f > 1.9
        input = STDIN.read.force_encoding('utf-8')
      else
        input = STDIN.read
      end
    # else
    #   raise "No input or text specified for note"
    end

    additional_options = {}
    additional_options[:theme] = options[:theme] ? options[:theme] : nh.default_theme
    additional_options[:font] = options[:font] ? options[:font] : nh.default_font
    additional_options[:header_font] = options[:header] ? options[:header] : nh.default_header_font
    additional_options[:file] = File.expand_path(options[:f]) if options[:f]

    res = nh.new_note(input, options[:p], additional_options)

    raise "Error creating note" unless res
    note_url = options[:s] ? res['short'] : res['url']
    puts "Note created: #{note_url}"

    %x{echo "#{note_url}"|pbcopy} if options[:c]

    %x{open "#{res['url']}"} if options[:o]
  end
end

# desc ''

# desc 'List stored note ids'
# arg_name 'search_term'
# command :list do |c|
#   c.action do |global_options,options,args|
#     nh.list_notes(args.join(" "))
#   end
# end

desc 'Create or update from a file'
arg_name 'file_name'
command :file do |c|
  c.action do |global_options,options,args|
    id = nil
    input = nil
    pass = nil
    short = nil
    notes = nh.notes['notes']
    notes.each {|k,note|
      if note.has_key?('file')
        if File.basename(note['file']) == File.basename(args[0])
          note['file'] = File.expand_path(args[0])
          nh.store_note(note)
          id = note['id']
          short = note['short']
          pass = note['pass']
          input = "use_previous"
          break
        end
      end
    }
    if id
      res = nh.update_note(id, input, pass)
      nh.tag_file(id,short)
      if res
        puts "Note updated"

      else
        puts "Error updating note"
      end
    else
      file = File.expand_path(args[0])
      if File.exists?(file)
        additional_options = {}
        additional_options[:theme] = nh.default_theme
        additional_options[:font] = nh.default_font
        additional_options[:header_font] = nh.default_header_font
        additional_options[:file] = File.expand_path(args[0])
        input = IO.read(file)
        res = nh.new_note(input, nh.default_password, additional_options)
        if res
          puts "Note created"
          nh.tag_file(res['id'],res['short'])
        else
          puts "Error creating note"
        end
      else
        raise "No such file"
      end
    end
  end
end

desc 'Update a note'
arg_name 'search_term'
command :update do |c|
  c.desc 'ID for note (default: choose from list)'
  c.default_value false
  c.flag [:id]

  c.desc 'Create note from pasteboard (OS X only)'
  c.switch [:P,:paste]

  c.desc 'Password for note'
  c.flag [:p,:password]

  c.desc 'Read input from file'
  default_value false
  c.flag [:f,:file,'file_name']

  c.desc 'Update from previously used file (re-use)'
  c.switch [:r,:reuse]

  c.desc 'Copy resulting url to clipboard'
  c.switch [:c,:copy]

  c.desc 'Open created note in browser'
  c.switch [:o,:open]

  c.desc 'Shorten URL'
  c.switch [:s,:short]

  c.action do |global_options,options,args|
    if options[:f] && !options[:r]
      if File.exists?(File.expand_path(options[:f]))
        input = IO.read(File.expand_path(options[:f]))
      else
        raise "File not found: #{options[:f]}"
      end
    elsif options[:P]
      input = %x{pbpaste}
    elsif options[:r]
      input = "use_previous"
    else
      # puts "Input note text, ^d to submit" unless STDIN.stat.size > 0
      if RUBY_VERSION.to_f > 1.9
        input = STDIN.read.force_encoding('utf-8')
      else
        input = STDIN.read
      end
    # else
    #   raise "No input or text specified for note"
    end

    args = args.join(" ").strip
    note = false
    notes = nh.notes['notes']
    if args =~ /\S\/\S/ && args =~ /^[a-z0-9\/\-]+$/

      if notes.has_key? (args)
        note = notes[args]
      end
    end

    unless note
      puts "Choose a note:"
      note = nh.choose_note(args)
    end


    raise "Error reading selected note" unless note
    id = note['id'].strip

    res = nh.update_note(id, input, options[:p])
    raise "Error updating note" unless res

    note_url = options[:s] ? res['shortUrl'] : res['longUrl']
    puts "Note updated: #{note_url}"

    %x{echo "#{note_url}"|pbcopy} if options[:c]

    %x{open #{res['url']}} if options[:o]
  end
end

desc 'Retrieve info for a selected note'
arg_name 'search_term'
command :info do |c|
  c.desc 'Specific key to retrieve (id, url, short, etc.)'
  c.flag [:k,:key]

  c.desc 'Copy result to clipboard (OS X)'
  c.switch [:c,:copy], :negatable => false

  c.action do |global_options, options, args|
    args = args.join(" ").strip
    note = false
    notes = nh.notes['notes']
    if args =~ /\S\/\S/ && args =~ /^[a-z0-9\/\-]+$/

      if notes.has_key? (args)
        note = notes[args]
      end
    end

    unless note
      puts "Choose a note:"
      note = nh.choose_note(args)
    end

    if note
      extra = nh.read_note(note['id'])
      note['stats'] = extra['statistics']
      nh.store_note(note)
      if options[:k]
        if note.has_key?(options[:k])
          out = note[options[:k]].strip
        else
          raise "Key #{options[:k]} not found"
        end
      else
        out = "\n"
        out += note['title'].strip + "\n"
        out += "-".hr(note['title'].strip.length)  + "\n"
        out += "    URL: #{note['short']} (#{note['url']})" + "\n"
        out += "Created: #{note['stats']['published']}" + "\n"
        out += " Edited: #{note['stats']['edited']}" + "\n" if note['stats'].has_key?('edited')
        out += "  Views: #{note['stats']['views']}" + "\n"
        out += "     ID: #{note['id']}" + "\n"
        out += "   File: #{note['file']}" if note.has_key?('file')
      end
      puts out

      if options[:c]
        %x{echo #{Shellwords.escape(out.strip)}|tr -d "\n"|pbcopy}
      end
    else
      raise "Cancelled"
    end
  end

end

desc 'Open the selected note in the default browser'
arg_name 'search_term'
command :view do |c|
  c.action do |global_options,options,args|
    puts "Choose a note:"
    note = nh.choose_note(args.join(" "))
    if note
      %x{open "#{note['url']}"}
    else
      raise "Cancelled"
    end
    # list = nh.find_notes(args.join(" "))
    # list.each_with_index { |note, i| puts "% 3d: %s" % [i+1, note['title']] }
    # print "> "
    # num = gets
    # unless num =~ /^[a-z ]*$/i
    #   %x{open #{list[num.to_i - 1]['url']}}
    # end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
